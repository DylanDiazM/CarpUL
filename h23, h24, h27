import 'package:flutter/material.dart';

void main() {
  runApp(CalificacionApp());
}

class CalificacionApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Calificación del Conductor',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      routes: {
        '/': (context) => CalificacionPage(),
        '/feedback': (context) => FeedbackPage(),
        '/usuario': (context) => UsuarioPage(),
        '/listadoCalificaciones': (context) => ListadoCalificacionesPage(),
        '/editarCalificacion': (context) => EditarCalificacionPage(),
      },
    );
  }
}

class CalificacionPage extends StatefulWidget {
  @override
  _CalificacionPageState createState() => _CalificacionPageState();
}

class _CalificacionPageState extends State<CalificacionPage> {
  int _rating = 0;

  void _submitRating() {
    // Aquí puedes realizar la lógica para guardar la calificación en la base de datos
    // Puedes enviar el valor de "_rating" a tu backend o almacenarlo localmente, dependiendo de tus necesidades

    Navigator.pushNamed(context, '/feedback');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Calificar al conductor'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              '¿Cómo calificarías al conductor?',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                for (int i = 1; i <= 5; i++)
                  GestureDetector(
                    onTap: () {
                      setState(() {
                        _rating = i;
                      });
                    },
                    child: Icon(
                      Icons.star,
                      size: 40,
                      color: i <= _rating ? Colors.amber : Colors.grey,
                    ),
                  ),
              ],
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _submitRating,
              style: ElevatedButton.styleFrom(
                primary: Colors.blue,
                onPrimary: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              child: Text(
                'Enviar calificación',
                style: TextStyle(fontSize: 18),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class FeedbackPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Enviar Feedback'),
      ),
      body: Center(
        child: Padding(
          padding: EdgeInsets.all(20),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextField(
                onChanged: (value) {
                  // Aquí puedes almacenar el valor del feedback en una variable local
                },
                decoration: InputDecoration(
                  hintText: 'Escribe tu feedback aquí',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Aquí puedes realizar la lógica para guardar el feedback en la base de datos
                  Navigator.pushNamed(context, '/usuario');
                },
                style: ElevatedButton.styleFrom(
                  primary: Colors.blue,
                  onPrimary: Colors.white,
                  padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                child: Text(
                  'Enviar feedback',
                  style: TextStyle(fontSize: 18),
                ),
              ),
              SizedBox(height: 10),
              TextButton(
                onPressed: () {
                  // Aquí puedes realizar la lógica para manejar el caso en que el usuario no desee enviar feedback
                  Navigator.pushNamed(context, '/usuario');
                },
                child: Text(
                  'No enviar feedback',
                  style: TextStyle(fontSize: 16),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class UsuarioPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mi Usuario'),
        actions: [
          IconButton(
            icon: Icon(Icons.edit),
            onPressed: () {
              Navigator.pushNamed(context, '/listadoCalificaciones');
            },
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Bienvenido a tu perfil de usuario',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}

class ListadoCalificacionesPage extends StatefulWidget {
  @override
  _ListadoCalificacionesPageState createState() =>
      _ListadoCalificacionesPageState();
}

class _ListadoCalificacionesPageState extends State<ListadoCalificacionesPage> {
  List<Map<String, dynamic>> calificaciones = [
    {'id': 1, 'conductor': 'Conductor 1', 'rating': 4, 'comentario': 'Buen servicio'},
    {'id': 2, 'conductor': 'Conductor 2', 'rating': 5, 'comentario': 'Muy amable'},
    {'id': 3, 'conductor': 'Conductor 3', 'rating': 3, 'comentario': 'Llegó tarde'},
  ];

  void _updateCalificacion(Map<String, dynamic> updatedCalificacion) {
    setState(() {
      final index = calificaciones.indexWhere((c) => c['id'] == updatedCalificacion['id']);
      calificaciones[index] = updatedCalificacion;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mis Calificaciones'),
      ),
      body: ListView.builder(
        itemCount: calificaciones.length,
        itemBuilder: (context, index) {
          final calificacion = calificaciones[index];
          return ListTile(
            title: Text(calificacion['conductor']),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('Calificación: ${calificacion['rating']} estrellas'),
                Text('Comentario: ${calificacion['comentario']}'),
              ],
            ),
            onTap: () {
              Navigator.pushNamed(
                context,
                '/editarCalificacion',
                arguments: calificacion,
              ).then((result) {
                if (result != null) {
                  _updateCalificacion(result as Map<String, dynamic>);
                }
              });
            },
          );
        },
      ),
    );
  }
}

class EditarCalificacionPage extends StatefulWidget {
  @override
  _EditarCalificacionPageState createState() => _EditarCalificacionPageState();
}

class _EditarCalificacionPageState extends State<EditarCalificacionPage> {
  int _rating = 0;
  String _comentario = '';

  @override
  void initState() {
    super.initState();

    WidgetsBinding.instance?.addPostFrameCallback((_) {
      final dynamic args =
          ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>;

      if (args != null) {
        setState(() {
          _rating = args['rating'] as int;
          _comentario = args['comentario'] as String;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Editar Calificación'),
      ),
      body: Padding(
        padding: EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text('Calificación actual: $_rating estrellas'),
            SizedBox(height: 10),
            Text('Comentario actual: $_comentario'),
            SizedBox(height: 20),
            Text('Editar calificación'),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                for (int i = 1; i <= 5; i++)
                  GestureDetector(
                    onTap: () {
                      setState(() {
                        _rating = i;
                      });
                    },
                    child: Icon(
                      Icons.star,
                      size: 40,
                      color: i <= _rating ? Colors.amber : Colors.grey,
                    ),
                  ),
              ],
            ),
            SizedBox(height: 20),
            TextField(
              onChanged: (value) {
                setState(() {
                  _comentario = value;
                });
              },
              decoration: InputDecoration(
                hintText: 'Editar comentario',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                final updatedCalificacion = {
                  'rating': _rating,
                  'comentario': _comentario,
                };
                // Aquí puedes realizar la lógica para guardar la calificación y comentario actualizados en la base de datos
                Navigator.pop(context, updatedCalificacion);
              },
              style: ElevatedButton.styleFrom(
                primary: Colors.blue,
                onPrimary: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              child: Text('Guardar cambios'),
            ),
          ],
        ),
      ),
    );
  }
}
